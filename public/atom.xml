<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hungry Academy Blog]]></title>
  <link href="http://hungryacademy.com/news/atom.xml" rel="self"/>
  <link href="http://hungryacademy.com/news/"/>
  <updated>2012-02-27T14:20:27-05:00</updated>
  <id>http://hungryacademy.com/news/</id>
  <author>
    <name><![CDATA[Hungry Academy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Authorization with CanCan]]></title>
    <link href="http://hungryacademy.com/news/blog/2012/02/22/code-post/"/>
    <updated>2012-02-22T11:28:00-05:00</updated>
    <id>http://hungryacademy.com/news/blog/2012/02/22/code-post</id>
    <content type="html"><![CDATA[<p>Authorization is an important aspect to most any application. As a system, it is put in place to determine whether the current user has the permission to perform the requested action. Based on this, it typically happens after a user is authenticated, but before a request is processed.</p>

<p>The important question to ask is, <em>is the user allowed to do what they&#8217;re trying to do</em>?</p>

<h2>Getting Started</h2>

<p>When considering implementing an authorization system in Rails, there are two popular libraries.</p>

<p>The first, <a href="https://github.com/stffn/declarative_authorization">Declarative Authorization</a> has been around since 2008. It introduced the idea of a centralized permissions file and a clean DSL for referring to those permissions.</p>

<p>Later, <a href="https://github.com/ryanb/cancan">CanCan</a>, was inspired by DeclarativeAuthorization and created by Ryan Bates of Railscasts. It provides an intuitive interface to define your authorization rules and integrates into Rails seamlessly.</p>

<p>They&#8217;re both great choices, but let&#8217;s look at implementing CanCan.</p>

<!--more-->


<h3>Setup</h3>

<p>To get started, add <code>cancan</code> to the <code>Gemfile</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;cancan&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then run <code>bundle</code> from the command line.</p>

<h3>The Current User</h3>

<p>It is conventional to implement a helper method named <code>current_user</code> in your controllers. It should return an instance of the <code>User</code> model that is currently active in the session.</p>

<p><code>CanCan</code> is expecting <code>current_user</code> to be available for its controller includes to work, which are setup automatically in descendants of <code>ActionController::Base</code> once the <code>CanCan</code> gem is required.</p>

<h2>Creating Abilities</h2>

<p>To define an application&#8217;s authorization rules, we&#8217;ll think in terms of abilities. For example, is the <code>current_user</code> able to update their own information?</p>

<h3>Generate the Ability File</h3>

<p>As of version 1.5, <code>CanCan</code> includes a generator to create our <code>Ability</code> file for Rails 3 applications. It is placed in the <code>app/models</code> directory and is where all of your ability definitions will live. To execute the generator, run the following from the command line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">generate</span> <span class="n">cancan</span><span class="ss">:ability</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Defining Abilities</h3>

<p><code>CanCan</code> provides a succinct DSL for defining abilities. Let&#8217;s dive in and look at a simple example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/ability.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Ability</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Add in CanCan&#39;s ability definition DSL</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">CanCan</span><span class="o">::</span><span class="no">Ability</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span> <span class="n">user</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Handle the case where we don&#39;t have a current_user i.e. the user is a guest</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">||=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Define a few sample abilities</span>
</span><span class='line'>    <span class="n">can</span>    <span class="ss">:manage</span> <span class="p">,</span> <span class="no">Article</span>
</span><span class='line'>    <span class="n">cannot</span> <span class="ss">:manage</span> <span class="p">,</span> <span class="no">Comment</span>
</span><span class='line'>    <span class="n">can</span>    <span class="ss">:read</span>   <span class="p">,</span> <span class="no">Tag</span> <span class="p">,</span> <span class="n">released</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>CanCan</code> generator will provide the structure for your Ability class. At a basic level then, all you need to do is implement the constructor. Here we can see a few things&#8230;</p>

<ul>
<li>As is recommended in the <code>CanCan</code> documentation, the case where a <code>current_user</code> is <code>nil</code> is handled.</li>
<li>A user can perform all actions (<code>:manage</code>) the <code>Article</code> model</li>
<li>Users cannot perform any actions on the <code>Comment</code> model.</li>
<li>Users can read instances of the <code>Tag</code> model where <code>baz.released</code> is <code>true</code></li>
</ul>


<h3>Building Roles</h3>

<p>By default, <code>CanCan</code> does not make any assumptions about whether you will need roles in your application and what they might be. At their most basic, we could implement administrators and non-administrators.</p>

<p>To begin implementing roles, let&#8217;s consider a simple <code>User</code> model.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/user.rb</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:name</span> <span class="p">,</span> <span class="ss">:email</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># User::Roles</span>
</span><span class='line'>  <span class="c1"># The available roles</span>
</span><span class='line'>  <span class="no">Roles</span> <span class="o">=</span> <span class="o">[</span> <span class="ss">:admin</span> <span class="p">,</span> <span class="ss">:default</span> <span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">is?</span><span class="p">(</span> <span class="n">requested_role</span> <span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">role</span> <span class="o">==</span> <span class="n">requested_role</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, the <code>User::Roles</code> array lists the different roles that a <code>User</code> might be. Since we want to persist a user&#8217;s role, we would add a <code>String</code> field called <code>role</code> to the <code>User</code> model via a database migration.</p>

<h3>Admin Abilities</h3>

<p>Now, to define the abilities of an <code>:admin</code>, we should revisit the previously created <code>Ability</code> class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/ability.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Ability</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">CanCan</span><span class="o">::</span><span class="no">Ability</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span> <span class="n">user</span> <span class="p">)</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">||=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Define User abilities</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">is?</span> <span class="ss">:admin</span>
</span><span class='line'>      <span class="n">can</span> <span class="ss">:manage</span><span class="p">,</span> <span class="no">Article</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">can</span> <span class="ss">:read</span><span class="p">,</span> <span class="no">Article</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If a user is an <code>:admin</code>, they&#8217;re allowed to manage any <code>Article</code>. Otherwise, users can only read articles. By using the simple <code>User#is?</code> method, we can expressively determine the role of a user.</p>

<p>See the <code>CanCan</code> wiki for more information on <a href="https://github.com/ryanb/cancan/wiki/Defining-Abilities">Defining Abilities</a> and <a href="https://github.com/ryanb/cancan/wiki/Role-Based-Authorization">Role Based Authorization</a>.</p>

<h2>Checking Abilities</h2>

<p>Once your application&#8217;s abilities are defined, they can be checked throughout the app.</p>

<h3>Can?</h3>

<p>The <code>can?</code> check uses your ability definitions to determine whether a user action is allowed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;New User&quot;</span> <span class="p">,</span> <span class="n">new_user_path</span> <span class="k">if</span> <span class="n">can?</span> <span class="ss">:create</span><span class="p">,</span> <span class="no">User</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h4>Cannot?</h4>

<p>Alternatively, the <code>cannot?</code> helper is available and checks whether a user action is NOT allowed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rhtml'><span class='line'><span class="cp">&lt;%</span> <span class="k">if</span> <span class="n">cannot?</span> <span class="ss">:destroy</span> <span class="p">,</span> <span class="vi">@user</span> <span class="cp">%&gt;</span>
</span><span class='line'>  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;permission-message&quot;</span><span class="nt">&gt;</span>You aren&#39;t allowed to delete this user.<span class="nt">&lt;/span&gt;</span>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Load and Authorize Resource</h3>

<p><code>CanCan</code> provides numerous helpers for use at the controller level. One that is particularly useful is <code>load_and_authorize_resource</code>. Calling this at a class level in a controller will automatically load the model and authorize the requested action.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/controllers/users_controller.rb</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">load_and_authorize_resource</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Handling Authorization Failure</h3>

<p>When using <code>load_and_authorize_resource</code> manually, an authorization failure will raise a exception. The way to handle these exceptions is by writing a <code>rescue_from</code> block in your base controller.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/controllers/application_controller.rb</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Catch all CanCan errors and alert the user of the exception</span>
</span><span class='line'>  <span class="n">rescue_from</span> <span class="no">CanCan</span><span class="o">::</span><span class="no">AccessDenied</span> <span class="k">do</span> <span class="o">|</span> <span class="n">exception</span> <span class="o">|</span>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">root_url</span><span class="p">,</span> <span class="ss">:alert</span> <span class="o">=&gt;</span> <span class="n">exception</span><span class="o">.</span><span class="n">message</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The exception passed in to the <code>rescue_from</code> block will contain the data necessary to inform the user of the error.</p>

<h2>Usage Patterns</h2>

<h3>Dealing with Complexity</h3>

<p>As your application grows beyond a few models, ability definitions can
quickly become complex. At first, a solution such as the one described
in the last section of the <code>CanCan</code> <a href="https://github.com/ryanb/cancan/wiki/Role-Based-Authorization">Role Based
Authorization</a>
wiki page can be useful. Even then, the <code>ability.rb</code> file can grow
unruly at fast pace.</p>

<p>At a certain point, there are few options to keep ability definitions
under control:</p>

<ul>
<li>Roll your own solution to split ability definitions in to multiple files by role or model.</li>
<li>Use a <code>CanCan</code> extension gem such as <a href="https://github.com/kristianmandrup/cantango">cantango</a> or <a href="https://github.com/quickleft/role_up">role_up</a></li>
</ul>


<h3>Testing Abilities</h3>

<p>Writing tests against your ability definitions at the unit level, as
opposed to through functional or integration tests, can be a huge
benefit for your codebase. There are wonderful matchers available for
<code>RSpec</code> in <code>CanCan</code>. Check out the <a href="https://github.com/ryanb/cancan/wiki/Testing-Abilities">testing wiki
page</a> for code
examples.</p>

<h2>Exercises</h2>

<p>Included file &#8216;custom/sample_project.html&#8217; not found in _includes directory</p>

<ol>
<li>Follow the instructions above to install CanCan and generate the abilities file.</li>
<li>Follow the previous Local Authentication tutorial to build authentication using Devise.</li>
<li>Define a <code>role</code> attribute in your users table. Create one admin and one non-admin user.</li>
<li>Define abilities such that the admin can manage an <code>Article</code> and a normal user can only read them (using <code>index</code> and <code>show</code>).</li>
<li>Add checks in the view templates to hide links when the user is not permitted to execute the associated action.</li>
<li>Use <code>load_and_authorize_resource</code> in the <code>ArticlesController</code> and remove any unnecessary code in the actions.</li>
</ol>


<h2>References</h2>

<ul>
<li><a href="https://github.com/ryanb/cancan/wiki">CanCan Wiki</a></li>
<li><a href="https://github.com/stffn/declarative_authorization">Declarative Authorization</a></li>
<li><a href="http://edgeguides.rubyonrails.org/security.html#countermeasures">Security Countermeasures Rails Guide</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test Post]]></title>
    <link href="http://hungryacademy.com/news/blog/2012/02/22/test-post/"/>
    <updated>2012-02-22T10:32:00-05:00</updated>
    <id>http://hungryacademy.com/news/blog/2012/02/22/test-post</id>
    <content type="html"><![CDATA[<p><a href="testlink.html">TestLink</a></p>

<br />Here is some text


<h1>here is h1 text</h1>


<h2>here is h2 text</h2>


<h3>here is h3 text</h3>


<h4>here is h4 text</h4>


<h5>here is h5 text</h5>


<h6>here is h6 text</h6>


<p><strong>here is bold text</strong><br />
<em>here is italic text</em></p>

<ul>
  <li>here is a list item
    <ul><li>and a second level</li></ul></li>
  </ul>

]]></content>
  </entry>
  
</feed>
